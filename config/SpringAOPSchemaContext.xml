<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="    
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	<!-- 
		一、概念介绍
		切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。
		
		连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或处理异常的时候。在Spring AOP中，一个连接点总是表示一个方法的执行。
		
		通知（Advice）：在切面的某个特定的连接点上执行的动作.许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。
		
		切入点（Pointcut）：匹配连接点的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行.切入点表达式如何和连接点匹配是AOP的核心。
		
		引入（Introduction）：用来给一个类型声明额外的方法或属性（也被称为连接类型声明[inter-type declaration]）。Spring允许引入新的接口（以及一个对应的实现）
						      到任何被代理的对象。
		
		目标对象（target object）：被一个或多个切面所通知的对象。也被称做被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，这个对象永远是一个被代理（proxied）对象。
		
		AOP代理（AOP proxy）：AOP框架创建的对象，在Spring中，AOP代理可以是JDK动态代理或则CGLIB代理。
		
		织入（weaving）：把切面连接到其他的应用程序类型或对象上,并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP
		框架一样，在运行时完成织入。
		
		二、Spring AOP的功能和目标
			1、Spring AOP使用纯Java实现，它不需要专门的编译过程。Spring AOP不需要控制类装载器层次，因此适用于J2EE web容器或应用服务器。
			2、Spring 目前仅支持使用方法调用作为连接点(join point)。虽然可以在不影响到Spring AOP核心API的情况下加入对成员变量拦截器支持，但Spring并没有实现成员变量
			  拦截器。如果你需要把对成员变量的访问和更新也作为通知的连接点，可以考虑其它的语言，如AspectJ。
			  
			3、AOP代理：
			  Spring缺省使用J2SE动态代理（dynamic proxies）来作为AOP的代理。这样任何接口（或者接口集）都可以被代理。
			  Spring也可以使用CGLIB代理，对于需要代理类而不是代理接口的时候CGLIB代理是很有必要的。如果一个业务对象并没有实现一个接口，默认就会使用CGLIB。
		
		三、Spring AOP还是完全用AspectJ
			Spring AOP比完全使用AspectJ更加简单，因为它不需要引入AspectJ的编译器和织入器到你开发和构建过程中。
			如果你需要通知domain对象或其他没有在Spring容器中管理的任意对象，那么你需要使用AspectJ。
			
		在Spring的配置文件中，所有的切面和通知都必须定义在<aop:config />元素内部
		一个application context可以包含多个<aop:config />。一个<aop:config />可以包含pointcut(切入点)、advisor和aspect(切面)元素
		
		推荐的使用模式是仅仅使用<aop:config />风格，或这仅仅使用AutoProxyCreator(<aop:aspectj-autoproxy/>)风格
	 -->
	<bean id="springAopSchemaAspectBean" class="com.example.spring.aop.SpringAopSchemaAspect"></bean>
	<bean id="testAroundAdvice" class="com.example.spring.aop.TestAroundAdvice"></bean>
	<bean id="testBeforeAdvice" class="com.example.spring.aop.TestBeforeAdvice"></bean>
	<bean id="testAfterReturning" class="com.example.spring.aop.TestAfterReturning"></bean>
	<bean id="testAfterThrowing" class="com.example.spring.aop.TestAfterThrowing"></bean>
	
	<!-- 强制使用CGLIB代理需要将proxy-target-class设置为true -->
	<aop:config proxy-target-class="false">
		<!-- 声明一个切入点 ，需要在<aop:aspect />前面声明     属于"顶级的切入点"-->
		<aop:pointcut expression="execution(* com.example.spring.aop.*.*(..))" id="springAopSchemaTopPointcut"/>
		<!-- 
			声明一个切面(切面能对关注点进行模块化，例如横切多个类型和对象的事务管理)
			ref="springAopSchemaAspectBean" - 关联切面对应的bean
		 -->
		<aop:aspect id="springAopSchemaAspect" ref="springAopSchemaAspectBean">
			<aop:pointcut expression="execution(* com.example.spring.aop.TestBeforeAdvice.*(..))" id="testBeforeAdviceInnerPointcut"/>

			<!-- 
				前置通知：在某个连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）
				method 属性标识了提供通知主体的方法，这个方法必须定义在包含通知的切面元素所引用的bean中。在一个数据访问操作执行之前（一个方法执行由切入点表达式所匹配的连接点）
			 -->
			<!-- 关联"顶级的切入点" -->
			<aop:before method="monitorBeforeTopPointcut" pointcut-ref="springAopSchemaTopPointcut"/>
			<!-- 关联"内置的切入点" -->
			<aop:before method="monitorBeforeInnerPointcut" pointcut-ref="testBeforeAdviceInnerPointcut"/>
			<!-- 关联"内置的切入点表达式" -->
			<aop:before method="monitorBeforeExpressionPointcut" pointcut="execution(* com.example.spring.aop.TestBeforeAdvice.testBeforeExpressionPointcut(..))"/>
			
			<!-- 
				后置通知：后置通知在匹配的方法完全执行后运行，和前置通知一样，可以在<aop:aspect/>里声明它
				
				和@AspectJ风格一样，通知主体可以得到返回值。使用returning属性来指定传递返回值的参数名，但是在method[monitorAfterReturning]方法必须声明一个名字叫returning[afterReturn]的参数
				
				public void monitorAfterReturning(Object afterReturn);
			 -->
			<aop:after-returning method="monitorAfterReturning" pointcut="execution(* com.example.spring.aop.TestAfterReturning.*(..))" returning="retVal"/>
			
			<!-- 
				异常通知：异常通知在匹配方法抛出异常退出时执行
			 	使用throwing属性来指定传递异常的参数名
			 	public void monitorAfterThrowing(Object dataAccessEx)
			 -->
			<aop:after-throwing method="monitorAfterThrowing" pointcut="execution(* com.example.spring.aop.TestAfterThrowing.*(..))" throwing="vinoEx"/>
			 
			<!-- 
			 	环绕通知：环绕通知在匹配方法运行期的“周期”执行。他有机会在目标方法的前面和后面执行，并决定什么时候运行、怎么运行、甚至是否运行。
			 	环绕通知经常在需要在一个方法执行前后共享状态信息，并且实在线程安全的情况下使用（启动和停止一个计时器就是一个例子）。
			 	通知方法[monitorAround]的第一个参数的类型必须是ProceedingJoinPoint类型，在通知的主体中，调用ProceedingJoinPoint的proceed()
			 	方法来执行真正的方法。proceed方法也可能会被调用并且传入一个Object[]对象，该数组将作为方法执行时候的参数。
			  -->
			<aop:around method="monitorAround" pointcut="execution(* com.example.spring.aop.TestAroundAdvice.*(String,int)) and args(name,age)" />
		
			<!-- 
				最终通知：最终通知无论如何都会在匹配方法退出后执行。
			 -->
			<aop:after method="monitorAfter" pointcut="execution(* com.example.spring.aop.Test*.*(..)) and args(name,..)"/>
		</aop:aspect>
	</aop:config>
</beans>