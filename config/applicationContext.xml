<?xml version="1.0" encoding="UTF-8"?>
<!--
	xmlns="http://www.springframework.org/schema/beans" : 指出默认的命名空间为 http://www.springframework.org/schema/beans
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" : 可用的 XML Schema 实例命名空间，可以使用 schemaLocation 属性了。
															此属性有两个值。第一个值是需要使用的命名空间。第二个值是供命名空间使用的 XML schema 的位置   
-->
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="    
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd 
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- %%%%Spring JDBC%%%% start -->
	<!-- %数据库连接配置% start -->
	<context:property-placeholder location="classpath:db.properties" />
  	<!-- %数据库连接配置% end -->
  	
  	<!-- %数据源/数据库连接池c3p0配置% start -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${db.driverClassName}"></property>
		<property name="jdbcUrl" value="${db.url}"></property>
		<property name="user" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		<property name="maxPoolSize" value="20"></property>
		<property name="minPoolSize" value="5"></property>
		<property name="initialPoolSize" value="5"></property>
		<property name="maxIdleTime" value="20"></property>
	</bean>
	<!-- %数据源/数据库连接池c3p0配置% end -->
	
	<!-- %配置事务管理器% id如果省略，则默认为"transactionManager", start -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- %配置事务管理器% end -->
	
	<!-- %基于AOP的声明式事务配置% start -->
	<!-- %配置事务通知属性% start -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- %CRUD操作事务属性% start -->
			<tx:method name="create*" propagation="REQUIRED"/>
			<tx:method name="read*" propagation="REQUIRED" read-only="true" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" />
			<!-- %CRUD操作事务属性% end -->
		</tx:attributes>
	</tx:advice>
	<!-- %配置事务通知属性% end -->
	<aop:config>
		<!-- 切入点 -->
		<aop:pointcut id="serviceOperation" expression="execution(* com..*.service..*ServiceImpl.*(..))" />
		<!-- 
			advisor就像一个小的自包含的切面，这个切面只有一个通知
			关联通知(advice)和切入点(pointcut) -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
		<!-- 
		<aop:aspect id="transactionAspect" ref="transactionAspectBean">
			<aop:before pointcut-ref="serviceOperation" method="doTransactionBefore" />
			<aop:after-throwing pointcut-ref="serviceOperation" method="doTransactionThrowing" throwing="ex" />
		</aop:aspect>
		 -->
	</aop:config>
	<!-- %基于AOP的声明式事务配置% end -->
	<!-- %基于注解形式的声明式事务配置% start -->
	<!-- 
	<tx:annotation-driven transaction-manager="transactionManager"/>
	 -->
	<!-- %基于注解形式的声明式事务配置% end -->
	<!-- %%%%Spring JDBC%%%% end -->
	
	
	<!-- 
		开启Spring MVC 
		会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter两个bean
		enable-matrix-variables : 启动矩阵变量，默认为false
	-->
	<mvc:annotation-driven enable-matrix-variables="true">
		<mvc:message-converters>
			<!-- 
				默认注册了：
				ByteArrayHttpMessageConverter,StringHttpMessageConverter,SourceHttpMessageConverter,XmlAwareFormHttpMessageConverter 
				
				注册Json消息转换器 
				依赖：jackson-annotations-2.4.2.jar，jackson-core-2.4.2.jar、jackson-databind-2.4.2.jar
			-->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				 <property name="supportedMediaTypes">  
                    <list>  
                        <value>application/json; charset=UTF-8</value>  
                    </list>  
                </property> 
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!--自动扫描注解组件 -->
	<context:component-scan base-package="com" />

	<!-- Beetl视图技术 -->
	<bean id="beetlConfig" class="org.beetl.ext.spring.BeetlGroupUtilConfiguration" init-method="init"></bean>
	<bean id="viewResolver" class="org.beetl.ext.spring.BeetlSpringViewResolver">
		<property name="viewNames">
			<list>
				<value>beetl/**</value>
			</list>
		</property>
		<property name="order" value="0"/>
		<property name="prefix" value="/examples/"/>
		<property name="suffix" value=".html"/>
		<property name="contentType" value="text/html;charset=UTF-8" />
	</bean>
	<!-- Beetl视图技术 -->
	
	<!-- JSP视图解析器 -->
	<bean name="JSPViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 注意JSP的这个视图解析器order必须在最后 -->
		<property name="viewNames">
			<list>
				<value>jsp/**</value>
			</list>
		</property>
		<property name="order" value="256"/>
		<property name="prefix" value="/examples/"/>
		<property name="suffix" value=".jsp"/>
		<property name="contentType" value="text/html;charset=UTF-8"/>
	</bean>
	<!-- JSP视图解析器 -->
	
	<!-- 处理静态资源,一个*只能映射一级子目录，两个*可以映射多级子目录 -->
	<mvc:resources location="/commons/" mapping="/commons/**" />
	<mvc:resources location="/examples/" mapping="/examples/**" />
	<mvc:resources location="/business/" mapping="/business/**" />
</beans>